{"hierarchy":{"paths":[["doc:\/\/jp.co.aptpod.iSCP\/documentation\/iSCP"]]},"metadata":{"title":"Connect To intdash API","modules":[{"name":"iSCP"}],"role":"article","roleHeading":"Article"},"schemaVersion":{"major":0,"minor":3,"patch":0},"primaryContentSections":[{"content":[{"type":"heading","anchor":"overview","text":"Overview","level":2},{"type":"codeListing","syntax":"swift","code":["\/\/ iSCPをインポート","import iSCP","","\/\/\/ 接続するintdashサーバー","var targetServer: String = \"https:\/\/example.com\"","\/\/\/ ノードUUID（ここで指定されたノードとして送受信を行います。","\/\/\/ intdash APIでノードを生成した際に発行されたノードUUIDを指定します。）","var nodeID: String = \"00000000-0000-0000-0000-000000000000\"","\/\/\/ アクセストークン","\/\/\/","\/\/\/ intdash APIで取得したアクセストークンを設定して下さい。","var accessToken: String = \"\"","\/\/\/ コネクション","var connection: Connection?","","extension ExampleViewController {","    ","    func connect() {","        \/\/ 接続情報のセットアップをします。","        let urls = targetServer.components(separatedBy: \":\/\/\")","        var address: String","        var enableTLS = false","        if urls.count == 1 {","            address = urls[0]","        } else {","            enableTLS = urls[0] == \"https\"","            address = urls[1]","        }","        \/\/ WebSocketを使って接続するように指定します。","        let transportConfig: ITransportConfig = Transport.WebSocket.Config(","            enableTLS: enableTLS","        )","        Connection.connect(","            address: address,","            transportConfig: transportConfig,","            tokenSource: { token in","                \/\/ アクセス用のトークンを指定します。接続時に発生するイベントにより使用されます。","                \/\/ ここでは固定のトークンを返していますが随時トークンの更新を行う実装にするとトークンの期限切れを考える必要がなくなります。","                token(accessToken)","            },","            nodeID: nodeID) { [weak self] con, error in","            guard let con = con else {","                \/\/ 接続失敗。","                return","            }","            \/\/ 接続成功。","            connection = con","            connection?.delegate = self \/\/ ConnectionDelegate","            \/\/ 以降、openUpstreamやopenDownstreamなどが実行可能になります。","        }","    }","}","","extension ExampleViewController : ConnectionDelegate {","    ","    func didReconnect(connection: Connection) {","        \/\/ Connectionが再オープンされた際にコールされます。","    }","    ","    func didDisconnect(connection: Connection) {","        \/\/ Connectionがクローズされた際にコールされます。","    }","    ","    func didFailWithError(connection: Connection, error: Error) {","        \/\/ Connection内部で何らかのエラーが発生した際にコールされます。","    }","    ","}"]}],"kind":"content"}],"abstract":[{"text":"このサンプルではiscp-swiftを使ってintdash APIに接続します。","type":"text"}],"identifier":{"url":"doc:\/\/jp.co.aptpod.iSCP\/documentation\/iSCP\/ConnectToIntdashAPI","interfaceLanguage":"swift"},"kind":"article","sections":[],"variants":[{"paths":["\/documentation\/iscp\/connecttointdashapi"],"traits":[{"interfaceLanguage":"swift"}]},{"paths":["\/documentation\/iscp\/connecttointdashapi"],"traits":[{"interfaceLanguage":"occ"}]}],"references":{"doc://jp.co.aptpod.iSCP/documentation/iSCP":{"kind":"symbol","role":"collection","identifier":"doc:\/\/jp.co.aptpod.iSCP\/documentation\/iSCP","title":"iSCP","abstract":[{"type":"text","text":"iSCP Client for Swift は、iSCP version 2 を用いたリアルタイムAPIにアクセスするためのクライアントライブラリです。"}],"url":"\/documentation\/iscp","type":"topic"}},"variantOverrides":[{"traits":[{"interfaceLanguage":"occ"}],"patch":[{"path":"\/identifier\/interfaceLanguage","op":"replace","value":"occ"},{"value":null,"op":"add","path":"\/topicSections"},{"value":null,"op":"add","path":"\/seeAlsoSections"}]}]}